# Docker Compose for StudyHub Local Development
# Run `docker-compose up -d` to start the backend and MongoDB services for local development.
# Backend will be available at http://localhost:5000, MongoDB at localhost:27017.

version: '3.8'

services:
  # Backend service built from the ./backend directory using the Dockerfile.
  # Supports hot reload with nodemon for development.
  studyhub-backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: studyhub-backend
    ports:
      - "5000:5000"  # Map host port 5000 to container port 5000 for API access
    environment:
      - NODE_ENV=development  # Override production setting in Dockerfile for dev mode
      - PORT=5000  # Port for the backend server
      - MONGODB_URI=mongodb://mongodb:27017/studyhub  # Connect to MongoDB service using service name
      - JWT_SECRET=dev-secret-change-in-production  # Development-only JWT secret
      - ALLOWED_ORIGINS=http://localhost:3000,http://127.0.0.1:3000  # Allowed origins for CORS
    volumes:
      - ./backend:/app  # Mount backend directory for hot reload
      - /app/node_modules  # Anonymous volume to avoid overwriting container's node_modules
    depends_on:
      - mongodb  # Ensure MongoDB starts before backend
    command: npm run dev  # Override Dockerfile CMD to use nodemon for hot reload
    networks:
      - studyhub-network
    restart: unless-stopped  # Restart policy for resilience

  # MongoDB service for database storage.
  # Data persists across restarts using a named volume.
  mongodb:
    image: mongo:7  # Official MongoDB 7 image
    container_name: studyhub-mongodb
    ports:
      - "27017:27017"  # Map host port 27017 to container port 27017 for direct access
    environment:
      - MONGO_INITDB_DATABASE=studyhub  # Initialize database on first run
    volumes:
      - mongodb-data:/data/db  # Named volume for data persistence
    networks:
      - studyhub-network
    restart: unless-stopped  # Restart policy for resilience
    healthcheck:  # Optional health check to verify MongoDB is running
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 3

networks:
  studyhub-network:  # Custom bridge network for service communication
    driver: bridge

volumes:
  mongodb-data:  # Named volume for MongoDB data persistence